/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import DAO.ColectivoData;
import DAO.HorarioData;
import DAO.PasajeData;
import DAO.RutaData;
import Modelos.Colectivo;
import Modelos.Horario;
import Modelos.Pasaje;
import Modelos.Ruta;
import Utilidades.ComboBox;
import Utilidades.Tabla;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alamb
 */
public class VistaConsultarPasajes extends javax.swing.JInternalFrame {

    //RUTA
    //HORARIO
    //COLECTIVO
    /**
     * Creates new form VistaConsultarPasajes
     */
    public VistaConsultarPasajes() {
        initComponents();
        Tabla.crearCabeceras(tablaPasaje, modeloPasaje, new String[]{"ID", "Pasajero", "Colectivo", "Ruta", "Fecha", "Precio"}, new int[]{20, 150, 200, 220, 80, 50});
        eliminarPasaje.setEnabled(false);
        buscarPasaje.setEnabled(false);

        llenarCombos(ruta, colectivo);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPasaje = new javax.swing.JTable();
        colectivo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        ruta = new javax.swing.JComboBox<>();
        horario = new javax.swing.JComboBox<>();
        fecha = new com.toedter.calendar.JDateChooser();
        buscarPasaje = new javax.swing.JButton();
        eliminarPasaje = new javax.swing.JButton();

        setClosable(true);
        setTitle("Consultar Pasajes");
        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(800, 580));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Horario:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Colectivo:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, -1));

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setText("Fecha:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, -1, -1));

        tablaPasaje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaPasaje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablaPasajeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPasaje);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 740, 230));

        colectivo.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        getContentPane().add(colectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 240, 30));

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("Ruta:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        ruta.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ruta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rutaItemStateChanged(evt);
            }
        });
        getContentPane().add(ruta, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 240, 30));

        horario.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        getContentPane().add(horario, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 240, 30));

        fecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaPropertyChange(evt);
            }
        });
        getContentPane().add(fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, 240, -1));

        buscarPasaje.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buscarPasaje.setText("Buscar");
        buscarPasaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPasajeActionPerformed(evt);
            }
        });
        getContentPane().add(buscarPasaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 160, 40));

        eliminarPasaje.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        eliminarPasaje.setText("Eliminar");
        eliminarPasaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarPasajeActionPerformed(evt);
            }
        });
        getContentPane().add(eliminarPasaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 160, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarPasajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPasajeActionPerformed
        // TODO add your handling code here:
        int idRutaBuscar = ((Ruta) ruta.getSelectedItem()).getIdRuta();
        int idHorarioBuscar = ((Horario) horario.getSelectedItem()).getIdHorario();
        int idColectivoBuscar = ((Colectivo) colectivo.getSelectedItem()).getIdColectivo();
        Date fechaDate = fecha.getDate();
        LocalDate fechaLocal = fechaDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        String fechaBuscar = fechaLocal.toString();
        System.out.println(fechaBuscar);

        pasajesActivos = pasajeData.consultarPasajesFiltrado(idRutaBuscar, idColectivoBuscar, fechaBuscar, idHorarioBuscar);
        //System.out.println("RUTA ID: " + idRutaBuscar + "\n" + "COLECTIVO ID: " + idColectivoBuscar + "\n" + "FECHA: " + fechaBuscar + "\n" + "HORARIO ID: " + idHorarioBuscar);

        if (!pasajesActivos.isEmpty()) {
            generarTabla(pasajesActivos);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron pasajes con estos datos");
        }
    }//GEN-LAST:event_buscarPasajeActionPerformed

    private void rutaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rutaItemStateChanged
        // TODO add your handling code here:
        filtrarHorarios();
    }//GEN-LAST:event_rutaItemStateChanged

    private void eliminarPasajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarPasajeActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaPasaje.getSelectedRow();
        if (filaSeleccionada != -1) {
            int opcion = JOptionPane.showConfirmDialog(this, "Desea eliminar el pasaje seleccionado?");
            if (opcion == 0) {
                int idPasaje = (int) modeloPasaje.getValueAt(filaSeleccionada, 0);
                pasajeData.borrarPasajeFisico(idPasaje);
                JOptionPane.showMessageDialog(this, "Pasaje eliminado");
                Tabla.limpiarTabla(modeloPasaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Se debe seleccionar un pasaje para eliminar");
        }
    }//GEN-LAST:event_eliminarPasajeActionPerformed

    private void fechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaPropertyChange
        // TODO add your handling code here:
        chequearCampos();
    }//GEN-LAST:event_fechaPropertyChange

    private void tablaPasajeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPasajeMouseReleased
        // TODO add your handling code here:
        chequearCampos();
    }//GEN-LAST:event_tablaPasajeMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarPasaje;
    private javax.swing.JComboBox<Colectivo> colectivo;
    private javax.swing.JButton eliminarPasaje;
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JComboBox<Horario> horario;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<Ruta> ruta;
    private javax.swing.JTable tablaPasaje;
    // End of variables declaration//GEN-END:variables
    RutaData rutaData = new RutaData();
    HorarioData horarioData = new HorarioData();
    ColectivoData colectivoData = new ColectivoData();
    Pasaje pasajeActivo;
    List<Pasaje> pasajesActivos = null;
    PasajeData pasajeData = new PasajeData();

    private void generarTabla(List<Pasaje> pasajes) {
        Tabla.limpiarTabla(modeloPasaje);
        pasajes.forEach(pasaje -> modeloPasaje.addRow(new Object[]{pasaje.getIdPasaje(), pasaje.getPasajero().toString(), pasaje.getColectivo().toString(), pasaje.getRuta().toString(), pasaje.getFechaViaje().toString(), pasaje.getPrecio()}));
    }

    public void filtrarHorarios() {
        horario.removeAllItems();

        int idRuta = ((Ruta) ruta.getSelectedItem()).getIdRuta();
        List<Horario> horarios = horarioData.obtenerHorariosActivosPorIdRuta(idRuta);

        //FILTRADO DE HORARIOS
        ComboBox.llenar(horario, horarios);
    }

    public void chequearCampos() {
        if (fecha.getDate() != null) {
            buscarPasaje.setEnabled(true);
        } else {
            buscarPasaje.setEnabled(false);
        }

        int filaSeleccionada = tablaPasaje.getSelectedRow();

        if (filaSeleccionada != -1) {
            eliminarPasaje.setEnabled(true);
        } else {
            eliminarPasaje.setEnabled(false);
        }
    }

    //MEJORABLE
    public void llenarCombos(JComboBox combo1, JComboBox combo2) {
        CompletableFuture.supplyAsync(() -> {
            List<Ruta> rutas = rutaData.obtenerRutas();

            return rutas;
        }).thenAccept(rutas -> {
            ComboBox.llenar(combo1, rutas);
        });

        CompletableFuture.supplyAsync(() -> {
            List<Colectivo> colectivos = colectivoData.obtenerColectivos();

            return colectivos;
        }).thenAccept(colectivos -> {
            ComboBox.llenar(combo2, colectivos);
        });
    }

    private final DefaultTableModel modeloPasaje = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }
    };

    public void limpiarCampos() {
        fecha.setDate(null);
        Tabla.limpiarTabla(modeloPasaje);
    }
}
