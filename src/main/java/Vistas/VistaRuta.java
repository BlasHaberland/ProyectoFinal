package Vistas;

import DAO.CiudadData;
import DAO.RutaData;
import Modelos.Ciudad;
import Modelos.Ruta;
import Utilidades.ComboBox;
import Utilidades.Regex;
import java.time.LocalTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.swing.JOptionPane;

public class VistaRuta extends javax.swing.JInternalFrame {

  public VistaRuta() {
    initComponents();

    limpiarCampos();

    CompletableFuture.supplyAsync(() -> {
      List<Ciudad> ciudades = ciudadData.obtenerCiudades();

      return ciudades;
    }).thenAccept(ciudades -> {
      ComboBox.llenar(origen, ciudades);
      ComboBox.llenar(destino, ciudades);
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    origen = new javax.swing.JComboBox<>();
    destino = new javax.swing.JComboBox<>();
    duracionHoras = new javax.swing.JTextField();
    duracionMinutos = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    buscar = new javax.swing.JButton();
    limpiar = new javax.swing.JButton();
    guardar = new javax.swing.JButton();
    eliminar = new javax.swing.JButton();
    jLabel6 = new javax.swing.JLabel();
    estado = new javax.swing.JRadioButton();

    setClosable(true);
    setTitle("Rutas");
    setPreferredSize(new java.awt.Dimension(800, 580));

    origen.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    origen.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        origenItemStateChanged(evt);
      }
    });

    destino.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    destino.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        destinoItemStateChanged(evt);
      }
    });

    duracionHoras.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    duracionHoras.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        duracionHorasKeyReleased(evt);
      }
    });

    duracionMinutos.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    duracionMinutos.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        duracionMinutosKeyReleased(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel1.setText("horas y");

    jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel2.setText("minutos");

    jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel3.setText("Origen:");

    jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel4.setText("Destino:");

    jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel5.setText("Duraci√≥n:");

    buscar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    buscar.setText("Buscar");
    buscar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buscarActionPerformed(evt);
      }
    });

    limpiar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    limpiar.setText("Limpiar");
    limpiar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        limpiarActionPerformed(evt);
      }
    });

    guardar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    guardar.setText("Guardar");
    guardar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        guardarActionPerformed(evt);
      }
    });

    eliminar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    eliminar.setText("Eliminar");
    eliminar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        eliminarActionPerformed(evt);
      }
    });

    jLabel6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel6.setText("Estado:");

    estado.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        estadoItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(110, 110, 110)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel5)
                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
              .addComponent(jLabel6))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(estado)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(origen, 0, 324, Short.MAX_VALUE)
                    .addComponent(destino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                  .addComponent(duracionHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(duracionMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel2)
                  .addGap(0, 152, Short.MAX_VALUE))))))
        .addContainerGap(118, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(98, 98, 98)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabel3)
              .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(28, 28, 28)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabel4)
              .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(19, 19, 19))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(buscar)
            .addGap(51, 51, 51)))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(duracionHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(duracionMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addGap(28, 28, 28)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(estado))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(limpiar)
          .addComponent(guardar)
          .addComponent(eliminar))
        .addGap(45, 45, 45))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
    // TODO add your handling code here:
    Ciudad ciudadOrigen = (Ciudad) origen.getSelectedItem();
    Ciudad ciudadDestino = (Ciudad) destino.getSelectedItem();

    Ruta ruta = rutaData.obtenerRutaPorOrigenDestino(ciudadOrigen, ciudadDestino);

    if (ruta != null) {
      rutaActiva = ruta;

      buscar.setEnabled(false);
      limpiar.setEnabled(true);
      guardar.setEnabled(true);
      eliminar.setEnabled(true);
      guardar.setText("Editar");
      int horas = ruta.getDuracionEstimada().getHour();
      int minutos = ruta.getDuracionEstimada().getMinute();
      duracionHoras.setText(String.valueOf(horas));
      duracionMinutos.setText(String.valueOf(minutos));
      estado.setSelected(ruta.isEstado());
    } else {
      limpiarCampos();
      JOptionPane.showMessageDialog(this, "Ruta no encontrada");
    }
  }//GEN-LAST:event_buscarActionPerformed

  private void duracionHorasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_duracionHorasKeyReleased
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_duracionHorasKeyReleased

  private void duracionMinutosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_duracionMinutosKeyReleased
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_duracionMinutosKeyReleased

  private void origenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_origenItemStateChanged
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_origenItemStateChanged

  private void destinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_destinoItemStateChanged
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_destinoItemStateChanged

  private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
    // TODO add your handling code here:
    limpiarCampos();
  }//GEN-LAST:event_limpiarActionPerformed

  private void estadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoItemStateChanged
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_estadoItemStateChanged

  private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
    // TODO add your handling code here:
    boolean respuesta = rutaData.borrarRuta(rutaActiva.getIdRuta());

    if (respuesta) {
      limpiarCampos();
      JOptionPane.showMessageDialog(this, "Ruta eliminada");
    } else {
      JOptionPane.showMessageDialog(this, "Hubo un error al intentar eliminar la ruta");
    }
  }//GEN-LAST:event_eliminarActionPerformed

  private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
    // TODO add your handling code here:
    Ciudad nuevoOrigen = (Ciudad) origen.getSelectedItem();
    Ciudad nuevoDestino = (Ciudad) destino.getSelectedItem();
    int horasNuevo = Integer.parseInt(duracionHoras.getText());
    int minutosNuevo = Integer.parseInt(duracionMinutos.getText());
    boolean estadoNuevo = this.estado.isSelected();

    if (rutaActiva == null) {

      Ruta ruta = new Ruta(nuevoOrigen, nuevoDestino, LocalTime.of(horasNuevo, minutosNuevo, 0), estadoNuevo);
      boolean respuesta = rutaData.crearRuta(ruta);

      if (respuesta) {
        JOptionPane.showMessageDialog(this, "Ciudad creada");
      } else {
        JOptionPane.showMessageDialog(this, "Hubo un error al intentar crear la ciudad");
      }
    } else {
      rutaActiva.setOrigen(nuevoOrigen);
      rutaActiva.setDestino(nuevoDestino);
      rutaActiva.setDuracionEstimada(LocalTime.of(horasNuevo, minutosNuevo));
      rutaActiva.setEstado(estado.isSelected());

      boolean respuesta = rutaData.modificarRuta(rutaActiva);

      if (respuesta) {
        JOptionPane.showMessageDialog(this, "Ruta actualizada");
      } else {
        JOptionPane.showMessageDialog(this, "Hubo un error al intentar actualizar la ruta");
      }
    }

    limpiarCampos();
  }//GEN-LAST:event_guardarActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buscar;
  private javax.swing.JComboBox<Ciudad> destino;
  private javax.swing.JTextField duracionHoras;
  private javax.swing.JTextField duracionMinutos;
  private javax.swing.JButton eliminar;
  private javax.swing.JRadioButton estado;
  private javax.swing.JButton guardar;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JButton limpiar;
  private javax.swing.JComboBox<Ciudad> origen;
  // End of variables declaration//GEN-END:variables
  private final CiudadData ciudadData = new CiudadData();
  private Ruta rutaActiva;
  private RutaData rutaData = new RutaData();

  private void limpiarCampos() {
    rutaActiva = null;

    // buscar.setEnabled(true);
    chequearCampos();
    limpiar.setEnabled(false);
    eliminar.setEnabled(false);
    guardar.setEnabled(false);

    duracionHoras.setText("");
    duracionMinutos.setText("");
    guardar.setText("Guardar");
    estado.setSelected(true);
  }

  private void chequearCampos() {
    //OBTENER CAMPOS
    String textoDuracionHoras = duracionHoras.getText().trim();
    String textoDuracionMinutos = duracionMinutos.getText().trim();

    // EXPRESIONES REGULARES PARA VALIDAR DOCUMENTO, NOMBRE Y APELLIDO
    String idRegex = "^\\d{1,8}$";

    //VALIDAR CAMPOS
    boolean horaValida = Regex.validarRegex(idRegex, textoDuracionHoras);
    boolean minutoValido = Regex.validarRegex(idRegex, textoDuracionMinutos);

    boolean validado = horaValida && minutoValido;

    //HABILITAR BOTONES GUARDAR Y ELIMINAR SI TODOS LOS CAMPOS SON VALIDOS
    Ciudad ciudadOrigen = (Ciudad) origen.getSelectedItem();
    Ciudad ciudadDestino = (Ciudad) destino.getSelectedItem();

    if (rutaActiva == null && ciudadOrigen != null && ciudadDestino != null && !ciudadOrigen.equals(ciudadDestino)) {
      buscar.setEnabled(true);
    } else {
      buscar.setEnabled(false);
    }

    limpiar.setEnabled(rutaActiva != null || !duracionHoras.getText().equals("") || !duracionMinutos.getText().equals(""));
    eliminar.setEnabled(rutaActiva != null);
    guardar.setEnabled(validado && ciudadOrigen != null && ciudadDestino != null && !ciudadOrigen.equals(ciudadDestino));

    //MOSTRAR ERROR ESPECIFICO SEGUN EL CAMPO
    if (!textoDuracionHoras.isEmpty() && !horaValida) {
      JOptionPane.showMessageDialog(this, "Horas inv√°lida (S√≥lo se aceptan n√∫meros. M√≠nimo 1 d√≠gito");
    } else if (!textoDuracionMinutos.isEmpty() && !minutoValido) {
      JOptionPane.showMessageDialog(this, "Minutos inv√°lido (No se aceptan n√∫meros. M√≠nimo 1 caracteres");
    }
  }
}
