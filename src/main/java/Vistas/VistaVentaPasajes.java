package Vistas;

import DAO.ColectivoData;
import DAO.HorarioData;
import DAO.PasajeData;
import DAO.PasajeroData;
import DAO.RutaData;
import Modelos.Colectivo;
import Modelos.Horario;
import Modelos.Pasaje;
import Modelos.Pasajero;
import Modelos.Ruta;
import Utilidades.ComboBox;
import Utilidades.Regex;
import Utilidades.Tabla;
import java.awt.Color;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VistaVentaPasajes extends javax.swing.JInternalFrame {

  /**
   * Creates new form VistaVentaPasajes
   */
  public VistaVentaPasajes() {
    initComponents();

    limpiarCampos();

    Tabla.crearCabeceras(tablaRutas, modeloRutas, new String[]{"ID", "Origen", "Destino",}, new int[]{50, 200, 200});
    Tabla.crearCabeceras(tablaHorarios, modeloHorarios, new String[]{"ID", "Salida", "Llegada",}, new int[]{50, 200, 200});
    Tabla.crearCabeceras(tablaColectivos, modeloColectivos, new String[]{"ID", "MatrÃ­cula", "Marca", "Capacidad"}, new int[]{50, 100, 150, 150});
    Tabla.crearCabeceras(tablaPasajeros, modeloPasajeros, new String[]{"ID", "DNI", "Apellido", "Nombre"}, new int[]{50, 100, 150, 150});

    CompletableFuture.supplyAsync(() -> {
      List<Ruta> rutas = rutaData.obtenerRutas();

      return rutas;
    }).thenAccept(rutas -> {
      generarTablaRutas(rutas);
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelRutas = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    tablaRutas = new javax.swing.JTable();
    panelHorarios = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    tablaHorarios = new javax.swing.JTable();
    jLabel6 = new javax.swing.JLabel();
    panelColectivo = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    tablaColectivos = new javax.swing.JTable();
    jLabel4 = new javax.swing.JLabel();
    panelPasajeros = new javax.swing.JPanel();
    buscarDNI = new javax.swing.JTextField();
    buscar = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    tablaPasajeros = new javax.swing.JTable();
    panelAsientosDisponibles = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    pasajesLibres = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel12 = new javax.swing.JLabel();
    horarioSeleccionado = new javax.swing.JLabel();
    fechaSeleccionada = new javax.swing.JLabel();
    asientoSeleccionado = new javax.swing.JLabel();
    rutaSeleccionada = new javax.swing.JLabel();
    colectivoSeleccionado = new javax.swing.JLabel();
    pasajeroSeleccionado = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jLabel14 = new javax.swing.JLabel();
    fecha = new com.toedter.calendar.JDateChooser();
    jPanel2 = new javax.swing.JPanel();
    jLabel13 = new javax.swing.JLabel();
    comboAsientos = new javax.swing.JComboBox<>();
    jLabel15 = new javax.swing.JLabel();
    precio = new javax.swing.JTextField();
    limpiar = new javax.swing.JButton();
    guardar = new javax.swing.JButton();

    setClosable(true);
    setTitle("Venta");
    setPreferredSize(new java.awt.Dimension(800, 580));

    panelRutas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("Seleccione una ruta:");

    tablaRutas.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    tablaRutas.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tablaRutasMouseReleased(evt);
      }
    });
    jScrollPane4.setViewportView(tablaRutas);

    javax.swing.GroupLayout panelRutasLayout = new javax.swing.GroupLayout(panelRutas);
    panelRutas.setLayout(panelRutasLayout);
    panelRutasLayout.setHorizontalGroup(
      panelRutasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelRutasLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelRutasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
        .addContainerGap())
    );
    panelRutasLayout.setVerticalGroup(
      panelRutasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRutasLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel5)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
        .addContainerGap())
    );

    panelHorarios.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    tablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    tablaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tablaHorariosMouseReleased(evt);
      }
    });
    jScrollPane3.setViewportView(tablaHorarios);

    jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("Seleccione un horario:");

    javax.swing.GroupLayout panelHorariosLayout = new javax.swing.GroupLayout(panelHorarios);
    panelHorarios.setLayout(panelHorariosLayout);
    panelHorariosLayout.setHorizontalGroup(
      panelHorariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelHorariosLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelHorariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
          .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    panelHorariosLayout.setVerticalGroup(
      panelHorariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHorariosLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel6)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    panelColectivo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    tablaColectivos.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    tablaColectivos.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tablaColectivosMouseReleased(evt);
      }
    });
    jScrollPane2.setViewportView(tablaColectivos);

    jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel4.setText("Seleccione un colectivo:");

    javax.swing.GroupLayout panelColectivoLayout = new javax.swing.GroupLayout(panelColectivo);
    panelColectivo.setLayout(panelColectivoLayout);
    panelColectivoLayout.setHorizontalGroup(
      panelColectivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelColectivoLayout.createSequentialGroup()
        .addGroup(panelColectivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(panelColectivoLayout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
          .addGroup(panelColectivoLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    panelColectivoLayout.setVerticalGroup(
      panelColectivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelColectivoLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    panelPasajeros.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    buscarDNI.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    buscarDNI.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        buscarDNIKeyReleased(evt);
      }
    });

    buscar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    buscar.setText("Buscar");
    buscar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buscarActionPerformed(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel1.setText("Por DNI:");

    jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("Buscar pasajero:");

    tablaPasajeros.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    tablaPasajeros.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    tablaPasajeros.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tablaPasajerosMouseReleased(evt);
      }
    });
    jScrollPane1.setViewportView(tablaPasajeros);

    javax.swing.GroupLayout panelPasajerosLayout = new javax.swing.GroupLayout(panelPasajeros);
    panelPasajeros.setLayout(panelPasajerosLayout);
    panelPasajerosLayout.setHorizontalGroup(
      panelPasajerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelPasajerosLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelPasajerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(panelPasajerosLayout.createSequentialGroup()
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(buscarDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
            .addComponent(buscar))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        .addContainerGap())
    );
    panelPasajerosLayout.setVerticalGroup(
      panelPasajerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelPasajerosLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel7)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(panelPasajerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buscarDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(buscar))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        .addContainerGap())
    );

    panelAsientosDisponibles.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    jLabel9.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("Asientos disponibles:");
    jLabel9.setPreferredSize(new java.awt.Dimension(149, 26));

    pasajesLibres.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
    pasajesLibres.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    pasajesLibres.setText("--");

    jLabel8.setText("Ruta:");

    jLabel11.setText("Horario:");

    jLabel2.setText("Fecha:");

    jLabel10.setText("Colectivo:");

    jLabel3.setText("Asiento:");

    jLabel12.setText("Pasajero:");

    horarioSeleccionado.setForeground(java.awt.Color.orange);
    horarioSeleccionado.setText("Seleccione un horario");

    fechaSeleccionada.setForeground(java.awt.Color.orange);
    fechaSeleccionada.setText("Seleccione una fecha");

    asientoSeleccionado.setForeground(java.awt.Color.orange);
    asientoSeleccionado.setText("Seleccione un asiento");

    rutaSeleccionada.setForeground(java.awt.Color.orange);
    rutaSeleccionada.setText("Seleccione una ruta");

    colectivoSeleccionado.setForeground(java.awt.Color.orange);
    colectivoSeleccionado.setText("Seleccione un colectivo");

    pasajeroSeleccionado.setForeground(java.awt.Color.orange);
    pasajeroSeleccionado.setText("Seleccione un pasajero");

    javax.swing.GroupLayout panelAsientosDisponiblesLayout = new javax.swing.GroupLayout(panelAsientosDisponibles);
    panelAsientosDisponibles.setLayout(panelAsientosDisponiblesLayout);
    panelAsientosDisponiblesLayout.setHorizontalGroup(
      panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(pasajesLibres, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
            .addGroup(panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel8)
              .addComponent(jLabel11)
              .addComponent(jLabel2)
              .addComponent(jLabel10)
              .addComponent(jLabel3)
              .addComponent(jLabel12))
            .addGap(18, 18, 18)
            .addGroup(panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(asientoSeleccionado)
              .addComponent(pasajeroSeleccionado)
              .addComponent(rutaSeleccionada)
              .addComponent(horarioSeleccionado)
              .addComponent(fechaSeleccionada)
              .addComponent(colectivoSeleccionado))))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    panelAsientosDisponiblesLayout.setVerticalGroup(
      panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(pasajesLibres))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(panelAsientosDisponiblesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
            .addComponent(jLabel8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel11)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel12))
          .addGroup(panelAsientosDisponiblesLayout.createSequentialGroup()
            .addComponent(rutaSeleccionada)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(horarioSeleccionado)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fechaSeleccionada)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(colectivoSeleccionado)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(asientoSeleccionado)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pasajeroSeleccionado)))
        .addContainerGap())
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    jLabel14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel14.setText("Fecha de Viaje:");

    fecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        fechaPropertyChange(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel14)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(10, 10, 10)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(fecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    Date date = new Date();	// hoy
    fecha.setMinSelectableDate(date);

    jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 100, 100)));

    jLabel13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel13.setText("Asiento:");

    comboAsientos.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        comboAsientosItemStateChanged(evt);
      }
    });

    jLabel15.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel15.setText("Precio:");

    precio.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        precioActionPerformed(evt);
      }
    });
    precio.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        precioKeyReleased(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel13)
        .addGap(18, 18, 18)
        .addComponent(comboAsientos, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jLabel15)
        .addGap(18, 18, 18)
        .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
          .addComponent(comboAsientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    limpiar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    limpiar.setText("Limpiar");
    limpiar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        limpiarActionPerformed(evt);
      }
    });

    guardar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    guardar.setText("Confirmar");
    guardar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        guardarActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
              .addGap(2, 2, 2)
              .addComponent(panelRutas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(panelColectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(panelHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(14, 14, 14))
          .addComponent(panelPasajeros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(panelAsientosDisponibles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(7, 7, 7)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panelPasajeros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(panelRutas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(panelAsientosDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(panelHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(panelColectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(limpiar)
            .addComponent(guardar)))
        .addContainerGap(25, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
    // TODO add your handling code here:
    int dni = Integer.parseInt(buscarDNI.getText());

    Pasajero pasajero = pasajeroData.obtenerPasajeroActivoPorDni(dni);

    buscarDNI.setText("");

    if (pasajero != null) {
      List<Pasajero> pasajeros = new ArrayList<>();
      pasajeros.add(pasajero);

      generarTablaPasajeros(pasajeros);
    } else {
      JOptionPane.showMessageDialog(this, "No se encontraron pasajeros activos con el dni buscado");
    }

    chequearCampos();
  }//GEN-LAST:event_buscarActionPerformed

  private void tablaRutasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaRutasMouseReleased
    // TODO add your handling code here:
    comboAsientos.setEnabled(false);
    // comboAsientos.setSelectedItem(-1);
    horarioActivo = null;
    colectivoActivo = null;
    asientoActivo = null;
    // fechaActiva = null;
    tablaColectivos.getSelectionModel().clearSelection();
    pasajesLibres.setText("--");
    // asiento.setText("");

    int fila = tablaRutas.getSelectedRow();
    int idRuta = (int) tablaRutas.getModel().getValueAt(fila, 0);

    rutaActiva = rutaData.obtenerRutaPorId(idRuta);

    rutaSeleccionada.setText(rutaActiva.getOrigen() + " - " + rutaActiva.getDestino());
    rutaSeleccionada.setForeground(Color.GREEN);
    horarioSeleccionado.setText("Seleccione un horario");
    horarioSeleccionado.setForeground(Color.ORANGE);
    colectivoSeleccionado.setText("Seleccione un colectivo");
    colectivoSeleccionado.setForeground(Color.ORANGE);
    asientoSeleccionado.setText("Seleccione un asiento");
    asientoSeleccionado.setForeground(Color.ORANGE);

    List<Horario> horarios = horarioData.obtenerHorariosActivosPorIdRuta(idRuta);

    if (!horarios.isEmpty()) {
      generarTablaHorarios(horarios);
    } else {
      Tabla.limpiarTabla(modeloHorarios);
      //JOptionPane.showMessageDialog(this, "No se encontraron horarios activos para la ruta");
    }

    obtenerColectivoAsignado();
    obtenerPasajesDisponibles();
    chequearCampos();
  }//GEN-LAST:event_tablaRutasMouseReleased

  private void tablaHorariosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaHorariosMouseReleased
    // TODO add your handling code here:
    comboAsientos.setEnabled(false);
    // comboAsientos.setSelectedItem(-1);
    colectivoActivo = null;
    tablaColectivos.getSelectionModel().clearSelection();
    pasajesLibres.setText("--");
    // asiento.setText("");

    int fila = tablaHorarios.getSelectedRow();
    int idHorario = (int) tablaHorarios.getModel().getValueAt(fila, 0);

    horarioActivo = horarioData.obtenerHorarioPorId(idHorario);
    horarioSeleccionado.setText(horarioActivo.getHoraSalida() + " - " + horarioActivo.getHoraLlegada());
    horarioSeleccionado.setForeground(Color.GREEN);
    colectivoSeleccionado.setText("Seleccione un colectivo");
    colectivoSeleccionado.setForeground(Color.ORANGE);
    asientoSeleccionado.setText("Seleccione un asiento");
    asientoSeleccionado.setForeground(Color.ORANGE);

    obtenerColectivoAsignado();
    obtenerPasajesDisponibles();
    chequearCampos();
  }//GEN-LAST:event_tablaHorariosMouseReleased

  private void tablaColectivosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaColectivosMouseReleased
    // TODO add your handling code here:
    // asiento.setText("");
    comboAsientos.setEnabled(true);

    int fila = tablaColectivos.getSelectedRow();
    int idColectivo = (int) tablaColectivos.getModel().getValueAt(fila, 0);

    colectivoActivo = colectivoData.obtenerColectivoPorId(idColectivo);
    colectivoSeleccionado.setText(colectivoActivo.getMatricula() + " - " + colectivoActivo.getMarca() + " - " + colectivoActivo.getCapacidad());
    colectivoSeleccionado.setForeground(Color.GREEN);
    asientoSeleccionado.setText("Seleccione un asiento");
    asientoSeleccionado.setForeground(Color.ORANGE);

    obtenerPasajesDisponibles();
    llenarComboAsientos();
    chequearCampos();
  }//GEN-LAST:event_tablaColectivosMouseReleased

  private void tablaPasajerosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPasajerosMouseReleased
    // TODO add your handling code here:
    int fila = tablaPasajeros.getSelectedRow();
    int idPasajero = (int) tablaPasajeros.getModel().getValueAt(fila, 0);

    pasajeroActivo = pasajeroData.obtenerPasajeroPorId(idPasajero);
    pasajeroSeleccionado.setText(pasajeroActivo.getDni() + " - " + pasajeroActivo.getApellido() + ", " + pasajeroActivo.getNombre());
    pasajeroSeleccionado.setForeground(Color.GREEN);

    chequearCampos();
  }//GEN-LAST:event_tablaPasajerosMouseReleased

  private void fechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaPropertyChange
    // TODO add your handling code here:
    comboAsientos.setEnabled(false);
    // comboAsientos.setSelectedItem(-1);

    colectivoActivo = null;

    Date fechaDate = fecha.getDate();

    if (fechaDate != null) {
      fechaActiva = fechaDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
      obtenerPasajesDisponibles();
      fechaSeleccionada.setText(fechaActiva.toString());
      fechaSeleccionada.setForeground(Color.GREEN);
      asientoSeleccionado.setText("Seleccione un asiento");
      asientoSeleccionado.setForeground(Color.ORANGE);
    }

    obtenerColectivoAsignado();
    obtenerPasajesDisponibles();
    chequearCampos();
  }//GEN-LAST:event_fechaPropertyChange

  private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
    // TODO add your handling code here:
    limpiarCampos();
  }//GEN-LAST:event_limpiarActionPerformed

  private void precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_precioActionPerformed

  private void precioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioKeyReleased
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_precioKeyReleased

  private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
    // TODO add your handling code here:
    System.out.println(asientoActivo);
    Pasaje pasaje = new Pasaje(pasajeroActivo, colectivoActivo, rutaActiva, fechaActiva, horarioActivo.getHoraSalida(), Integer.parseInt(asientoActivo), Integer.parseInt(precio.getText()), true);

    boolean respuesta = pasajeData.crearPasaje(pasaje);

    if (respuesta) {
      limpiarCampos();
      JOptionPane.showMessageDialog(this, "Pasaje vendido");
    } else {
      JOptionPane.showMessageDialog(this, "Hubo un error al intentar vender el pasaje");
    }
  }//GEN-LAST:event_guardarActionPerformed

  private void buscarDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarDNIKeyReleased
    // TODO add your handling code here:
    chequearCampos();
  }//GEN-LAST:event_buscarDNIKeyReleased

  private void comboAsientosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAsientosItemStateChanged
    // TODO add your handling code here:
    if (comboAsientos.getSelectedItem() != null) {
      asientoActivo = (String) comboAsientos.getSelectedItem();
      asientoSeleccionado.setText(comboAsientos.getSelectedItem().toString());
      asientoSeleccionado.setForeground(Color.GREEN);
    }

    chequearCampos();
  }//GEN-LAST:event_comboAsientosItemStateChanged

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel asientoSeleccionado;
  private javax.swing.JButton buscar;
  private javax.swing.JTextField buscarDNI;
  private javax.swing.JLabel colectivoSeleccionado;
  private javax.swing.JComboBox<String> comboAsientos;
  private com.toedter.calendar.JDateChooser fecha;
  private javax.swing.JLabel fechaSeleccionada;
  private javax.swing.JButton guardar;
  private javax.swing.JLabel horarioSeleccionado;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel15;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JButton limpiar;
  private javax.swing.JPanel panelAsientosDisponibles;
  private javax.swing.JPanel panelColectivo;
  private javax.swing.JPanel panelHorarios;
  private javax.swing.JPanel panelPasajeros;
  private javax.swing.JPanel panelRutas;
  private javax.swing.JLabel pasajeroSeleccionado;
  private javax.swing.JLabel pasajesLibres;
  private javax.swing.JTextField precio;
  private javax.swing.JLabel rutaSeleccionada;
  private javax.swing.JTable tablaColectivos;
  private javax.swing.JTable tablaHorarios;
  private javax.swing.JTable tablaPasajeros;
  private javax.swing.JTable tablaRutas;
  // End of variables declaration//GEN-END:variables
  private RutaData rutaData = new RutaData();
  private ColectivoData colectivoData = new ColectivoData();
  private HorarioData horarioData = new HorarioData();
  private PasajeroData pasajeroData = new PasajeroData();
  private PasajeData pasajeData = new PasajeData();

  private Ruta rutaActiva;
  private Horario horarioActivo;
  private Colectivo colectivoActivo;
  private Pasajero pasajeroActivo;
  private LocalDate fechaActiva;
  private String asientoActivo;
  // int cantidadAsientosLibres;

  private void limpiarCampos() {
    rutaActiva = null;
    horarioActivo = null;
    colectivoActivo = null;
    pasajeroActivo = null;
    fechaActiva = null;
    asientoActivo = null;
    // cantidadAsientosLibres = 0;

    tablaRutas.getSelectionModel().clearSelection();
    tablaHorarios.getSelectionModel().clearSelection();
    tablaColectivos.getSelectionModel().clearSelection();
    tablaPasajeros.getSelectionModel().clearSelection();

    buscarDNI.setText("");

    rutaSeleccionada.setText("Seleccione una ruta");
    rutaSeleccionada.setForeground(Color.ORANGE);
    horarioSeleccionado.setText("Seleccione un horario");
    horarioSeleccionado.setForeground(Color.ORANGE);
    fecha.setCalendar(null);
    fechaSeleccionada.setText("Seleccione una fecha");
    fechaSeleccionada.setForeground(Color.ORANGE);
    colectivoSeleccionado.setText("Seleccione un colectivo");
    colectivoSeleccionado.setForeground(Color.ORANGE);
    asientoSeleccionado.setText("Seleccione un asiento");
    asientoSeleccionado.setForeground(Color.ORANGE);
    pasajeroSeleccionado.setText("Seleccione un pasajero");
    pasajeroSeleccionado.setForeground(Color.ORANGE);

    guardar.setEnabled(false);

    Tabla.limpiarTabla(modeloHorarios);
    Tabla.limpiarTabla(modeloColectivos);
    Tabla.limpiarTabla(modeloPasajeros);
  }

  private void obtenerColectivoAsignado() {
    if (rutaActiva != null && horarioActivo != null && fechaActiva != null) {
      CompletableFuture.supplyAsync(() -> {
        List<Colectivo> colectivos = new ArrayList<>();
        Colectivo colectivoAsignado = colectivoData.obtenerColectivoPorRutaHorarioFecha(rutaActiva.getIdRuta(), horarioActivo.getHoraSalida().toString(), fechaActiva.toString());

        if (colectivoAsignado != null) {
          colectivos.add(colectivoAsignado);
        } else {
          colectivos = colectivoData.obtenerColectivos();
        }

        return colectivos;
      }).thenAccept(colectivos -> {
        generarTablaColectivos(colectivos);
      });
    }
  }

  private void obtenerPasajesDisponibles() {
    if (horarioActivo != null && fechaActiva != null && rutaActiva != null && colectivoActivo != null) {
      System.out.println(colectivoActivo);
      int idRutaActiva = rutaActiva.getIdRuta();
      String fechaSelecionada = fechaActiva.toString();
      String horaSeleccionada = horarioActivo.getHoraSalida().toString();
      int idHorarioActivo = horarioActivo.getIdHorario();
      int idColectivoActivo = colectivoActivo.getIdColectivo();

      int pLibres = pasajeData.obtenerLugaresLibres(idRutaActiva, fechaSelecionada, horaSeleccionada, idHorarioActivo, idColectivoActivo);
      // cantidadAsientosLibres = pLibres;

      pasajesLibres.setText(String.valueOf(pLibres));

      if (pLibres == 0) {
        pasajesLibres.setForeground(Color.RED);

        return;
      }

      if (pLibres < 3) {
        pasajesLibres.setForeground(Color.YELLOW);

        return;
      }

      pasajesLibres.setForeground(Color.GREEN);
    } else {
      pasajesLibres.setForeground(Color.GRAY);
      pasajesLibres.setText(String.valueOf("--"));
    }
  }

  private void llenarComboAsientos() {
    int idColectivo = colectivoActivo.getIdColectivo();
    int idRuta = rutaActiva.getIdRuta();
    String fechaViaje = fechaActiva.toString();
    String horaViaje = horarioActivo.toString();
    List<String> asientosOcupados = colectivoData.obtenerAsientosOcupados(idColectivo, idRuta, fechaViaje, horaViaje);
    List<String> asientosLibres = new ArrayList<>();

    for (int i = 1; i <= colectivoActivo.getCapacidad(); i++) {
      if (!asientosOcupados.contains(String.valueOf(i))) {
        asientosLibres.add(String.valueOf(i));
      }
    }

    comboAsientos.removeAllItems();
    ComboBox.llenar(comboAsientos, asientosLibres);
  }

  private void generarTablaRutas(List<Ruta> rutas) {
    Tabla.limpiarTabla(modeloRutas);
    rutas.forEach(ruta -> modeloRutas.addRow(new Object[]{ruta.getIdRuta(), ruta.getOrigen().getNombre() + " (" + ruta.getOrigen().getProvincia() + ")", ruta.getDestino().getNombre() + " (" + ruta.getDestino().getProvincia() + ")"}));
  }

  private void generarTablaColectivos(List<Colectivo> colectivos) {
    Tabla.limpiarTabla(modeloColectivos);
    colectivos.forEach(colectivo -> modeloColectivos.addRow(new Object[]{colectivo.getIdColectivo(), colectivo.getMatricula(), colectivo.getMarca(), colectivo.getCapacidad()}));
  }

  private void generarTablaHorarios(List<Horario> horarios) {
    Tabla.limpiarTabla(modeloHorarios);
    horarios.forEach(horario -> modeloHorarios.addRow(new Object[]{horario.getIdHorario(), horario.getHoraSalida(), horario.getHoraLlegada()}));
  }

  private void generarTablaPasajeros(List<Pasajero> pasajeros) {
    Tabla.limpiarTabla(modeloPasajeros);
    pasajeros.forEach(pasajero -> modeloPasajeros.addRow(new Object[]{pasajero.getIdPasajero(), pasajero.getDni(), pasajero.getApellido(), pasajero.getNombre()}));
  }

  private final DefaultTableModel modeloRutas = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int col) {
      return false;
    }
  };

  private final DefaultTableModel modeloHorarios = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int col) {
      return false;
    }
  };

  private final DefaultTableModel modeloColectivos = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int col) {
      return false;
    }
  };

  private final DefaultTableModel modeloPasajeros = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int col) {
      return false;
    }
  };

  private void chequearCampos() {
    // OBTENER CAMPOS
    String textoPrecio = precio.getText().trim();
    String textoDocumento = buscarDNI.getText().trim();

    // EXPRESIONES REGULARES PARA VALIDAR PRECIO
    String numberRegex = "^\\d{1,8}$";

    //VALIDAR CAMPOS
    boolean valorPrecio = Regex.validarRegex(numberRegex, textoPrecio);
    boolean valorDocumento = Regex.validarRegex(numberRegex, textoDocumento);

    boolean validado = valorPrecio && rutaActiva != null && horarioActivo != null && fechaActiva != null && colectivoActivo != null && pasajeroActivo != null;

    //HABILITAR BOTONES GUARDAR Y ELIMINAR SI TODOS LOS CAMPOS SON VALIDOS
    System.out.println("**************************");
    System.out.println(valorPrecio);
    System.out.println(rutaActiva);
    System.out.println(horarioActivo);
    System.out.println(fechaActiva);
    System.out.println(colectivoActivo);
    System.out.println(pasajeroActivo);
    System.out.println("**************************");
    guardar.setEnabled(validado);
    //MOSTRAR ERROR ESPECIFICO SEGUN EL CAMPO
    if (!textoPrecio.isEmpty() && !valorPrecio) {
      JOptionPane.showMessageDialog(this, "Precio no vÃ¡lido (SÃ³lo se aceptan nÃºmeros. MÃ­nimo 1 dÃ­gito");
    } else if (!textoDocumento.isEmpty() && !valorDocumento) {
      JOptionPane.showMessageDialog(this, "Documento no vÃ¡lido (SÃ³lo se aceptan nÃºmeros. MÃ­nimo 1 dÃ­gito");
    }
  }
}
